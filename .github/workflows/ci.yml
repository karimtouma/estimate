name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t pdf-estimator:test .
        
    - name: Run tests in Docker
      run: |
        docker run --rm pdf-estimator:test python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
        
    - name: Extract coverage from Docker
      run: |
        docker run --rm -v $PWD:/workspace pdf-estimator:test sh -c "python -m pytest tests/ --cov=src --cov-report=xml && cp coverage.xml /workspace/"
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t pdf-estimator:lint .
        
    - name: Install linting tools in Docker
      run: |
        docker run --rm pdf-estimator:lint sh -c "pip install black isort flake8 mypy"
        
    - name: Check code formatting
      run: |
        docker run --rm pdf-estimator:lint black --check src/ tests/
        docker run --rm pdf-estimator:lint isort --check-only src/ tests/
        
    - name: Lint code
      run: |
        docker run --rm pdf-estimator:lint flake8 src/ tests/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.1.0
      with:
        inputs: requirements.txt

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t pdf-estimator:test .
        
    - name: Test Docker image
      run: |
        docker run --rm pdf-estimator:test python -c "from src.core.config import Config; print('âœ… Docker image working')"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, security, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        echo "## Changes" > RELEASE_NOTES.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> RELEASE_NOTES.md
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
